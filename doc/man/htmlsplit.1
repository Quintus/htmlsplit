.TH HTMLSPLIT 1 2015-06-06 "Marvin Gülker" "User Commands"
.mso www.tmac

.SH NAME
htmlsplit \- Split large HTML files into smaller HTML files

.SH SYNOPSIS

.B htmlsplit
.R [-i \fIFILE\fR]
.R [-l]
.R { [-o \fIDIR\fR] | [-s \fISEP\fR] }
.R [-p \fISECNUM\fR]
.R [-t \fIDEPTH\fR]
.R [-q]
.R [-x \fIXPATH\fR]
.R [-v]

.SH DESCRIPTION

.PP
The htmlsplit command splits a large HTML file into several smaller
HTML files by parsing it and applying an XPath query repeatedly onto
the larger HTML document. Each location where the XPath query matches
on the given document is remember as a \fIsplit point\fR, which you
can think of as the place the document is to be cut in two (or more)
parts.

The default behaviour is to cut at all \fB<h1>\fR tags found, but by
supplying the \fB-x\fR option you can replace that with any XPath
query you deem useful for your purposes.

By default, all parts found will be written to the standard output
separated by a customisable (see \fB-s\fR option) separator. By
specifying \fB-o\fR, you can advise \fBhtmlsplit\fR to write its
output into a directory instead. Note that in this case the directory
has to exist, it will not be created automatically for you and the
program will fail if it is not available.

Requesting verbose output with \fB-v\fR when you output to standard
output is a bad idea, because the output from the verbose run will
come out intermixed with the document parts then. For debugging
purposes, this combination is accepted though.

.SH OPTIONS

.TP
.B -i \fIFILE\fR
Read input from the given HTML file. If this option is ommitted, input
is read from standard input instead.

.TP
.B -l
Generate “previous” and “next” links in the common parent of the
splitting points. These links are placed inside an \fB<ul>\fR tag that
is itself contained in a \fB<div>\fR tag with the CSS class
\fBhtmlsplit-interlinks\fR, so that you can easily target this section
with your CSS. Note that \fBhtmlsplit\fR does not generate any CSS by
itself, so if you don’t style this section, it will show up in the
default way unstyled HTML elements show up. The contents of the links
are the HTML entities \fB&larr;\fR and \fB&rarr;\fR for previous and
next links, respectively.

.TP
.B -o \fIDIR\fR
Write output to the given directory. For each section found in the
input, one file with format \fIxxxx.html\fR is created in this
directory, where \fIxxxx\fR is replaced by a consecutive number
corresponding to the section found. The text part before the first
split point will receive the file name \fI0000.html\fR. If this option
is not given, output will be printed to the standard output. See also
option \fB-s\fR.

.TP
.B -p \fISECNUM\fR
Instead of outputting all parts found, only output the part with the
given section number index \fISECNUM\fR. The part before the first
splitpoint has index 0.

.TP
.B -s \fISEP\fR
When outputting to the standard output (i.e. \fB-o\fR was not given),
use this as the separator between the documents. It defaults to
\fB<!-- HTMLSPLIT -->\fR if not given. May not be longer than 1023
bytes. A newline is automatically appended to this.

.TP
.B -t \fIDEPTH\fR
Generate an additional file that contains a Table of Contents
(ToC). If output to standard output is requested, the ToC file is
output as a separate part. The ToC will contain all headings inside
the matched area, up to headings of the given level (i.e. 3 will
result in headings up to and including \fB<h3>\fR to be included into
the ToC).

.TP
.B -q
Do not output the copyright notice.

.TP
.B -x \fIXPATH\fR
Use \fIXPATH\fR as the XPath query to determine the split points. If
this option is ommited, it defaults to \fB//h1\fR, that is all
\fB<h1>\fR tags will be used as split points. Note that the XPath
query must either be an absolute one (starting with “/”), or one that
starts with “//” (= search on all levels).

.TP
.B -v
Verbose run. This option will make \fBhtmlsplit\fR output more
information during its operation.

.TP
.B -V
Print version number and exit.

.SH NOTES

The ToC generator requires the document’s author to specify something
it can target in the ToC file, because apart from the splitting and
re-merging actions \fBhtmlsplit\fR does not tamper with the document
itself. Thus, it looks for three possible indicators of ToC headings:

.RS

.IP 1.
An \fBid\fR attribute on the heading tag.

.IP 2.
An \fB<a>\fR tag inside the heading tag with a \fBname\fR attribute
set.

.IP 3.
An \fB<a>\fR tag with a \fBname\fR attribute immediately preceeding
the heading tag, or immediately following it, with no other tags
around it.

.RE

.PP
Any headings that do not fulfill at least one of these heuristics will
be split as usual (if they constitute a split point under the given
XPath query), but they will not be added to the ToC.

.PP
Please report any bugs you find to
.URL "mailto:m-guelker@guelkerdev.de" "Marvin Gülker".
For any bug report, please include the full output of running
\fBhtmlsplit\fR with the \fB-v\fR option, and, if possible and
applicable, a minimal example HTML file.

.PP
The project’s bugtracker and sourcecode can be browsed on the WWW at
.URL "https://github.com/Quintus/htmlsplit" "GitHub".

.SH BUGS

.PP
If the split points found by this program do not have the same parent
node (e.g. all in the \fB<body>\fR tag on the same level or inside
the same \fB<div>\fR), then unpredictable behaviour will result. They
may be at any depth (and their surroundings will be kept), but they
must be on the same depth. Consider this example:

.PP
    <!DOCTYPE html>
    <html>
      <head>
        <title>Bad example</title>
      </head>
      <body>
        <h1>Split point one</h1>
        <p>Text</p>
        <div class="baddiv">
          <h1>Split point two</h1>
          <p>Text</p>
        </div>
      </body>
    </html>

.PP
The above will result in undefined behaviour, because one split point
is found directly below the \fB<body>\fR tag, and another inside a
nested \fB<div>\fR tag. Thus, ensure that all your split points have
the same parent; in the above example, this could be achieved by
either moving the first \fB<h1>\fR and the following \fB<p>\fR into
the \fB<div>\fR, or by deleting the \fB<div>\fR and assigning its
content to the parent \fB<body>\fR tag.

Another way to mitigate this problem is to restrict the XPath query
used to find the split points by means of the \fB-x\fR option. For the
above example it could be set to \fB-x /html/body/div/h1\fR, in which
case the \fB<h1>\fR outside the \fB<div>\fR would not even be
considered as a split point.

.SH EXAMPLE

.PP
Split a large HTML file at its \fB<h1>\fR sections into several
smaller files:

.PP
    $ mkdir /tmp/split
    $ htmlsplit -i large.html -o /tmp/split

.PP
Split it at \fB<h2>\fR instead:

.PP
    $ htmlsplit -i large.html -o /tmp/split -x '//h2'

.PP
Split at all \fB<h2>\fR tags inside the \fB<div>\fR with CSS class
\fBmain\fR inside the \fB<body>\fR tag:

.PP
    $ htmlsplit -i large.html -o /tmp/split \e
      -x '/html/body/div[@class="main"]/h2'

.PP
Split standard input:

.PP
    $ cat large.html | htmlsplit -o /tmp/split

.PP
Output to standard output with custom separator:

.PP
    $ htmlsplit -i large.html -s MYCUSTOMSEPARATOR

.SH SEE ALSO

.BR split(1)
